define(["components/Filter","components/Gain","modules/BaseModule"],function(e,t,n){var r={RANGE_MAX:22e3,RANGE_MIN:40},i=n.extend({init:function(n,i){this._super.apply(this,arguments),this.setLabel("Equalizer");var s,o=i||3,u=[],a=r.RANGE_MAX/o+r.RANGE_MIN,f=a,l=new t(this.context),c=new t(this.context);l.setLabel("Equalizer/Input Gain"),c.setLabel("Equalizer/Output Gain"),this.bands=o,this.nodes.inputGain=l,this.nodes.outputGain=c;for(var h=1;h<=i;h++)s=new e(this.context),s.setType(s.Types.PEAKING),s.setLabel("Equalizer/Filter"+h),s.setFrequency(f),function(e,t){u.push(t),e["filter"+h]=t}(this.nodes,s),f+=a,f=f>r.RANGE_MAX?r.RANGE_MAX:f,this.addParameter("filter"+h,s.getParameters());for(h=1;h<=o;h++)l.connect(this.nodes["filter"+h]),this.nodes["filter"+h].connect(c);this.addParameter("inputGain",l.getParameters()),this.addParameter("outputGain",c.getParameters()),this.connectToInput(l),this.connectToOutput(c),this.filters=u},setFilterFrequency:function(e,t){return this.nodes["filter"+e].setFrequency(t),this},setFilterGain:function(e,t){return this.nodes["filter"+e].setGain(t),this},setFilterQ:function(e,t){return this.nodes["filter"+e].setQ(t),this},setFilterType:function(e,t){return this.nodes["filter"+e].setType(t),this},setInputGain:function(e){return this.nodes.inputGain.setGain(e),this},setOutputGain:function(e){return this.nodes.outputGain.setGain(e),this}});return i.Types=i.prototype.Types=e.Types,console.log("DEBUG: Equalizer Module Loaded"),i});