define(["components/Gain","modules/BaseModule","components/ChannelMerger","components/Analyser"],function(e,t,n,r){var i=t.extend({init:function(t,r){this._super.apply(this,arguments),this._enable=this.enable,this._disable=this.disable,this._isRecording=!1,_.bindAll(this),_.extend(this,Backbone.Events);var i=this;this.nodes.merger=new n(this.context),this.nodes.gain=new e(this.context),this.nodes.reference=new e(this.context),this.nodes.merger.connect(this.nodes.gain).connect(this.nodes.reference),this.recorder=new Recorder(this.nodes.gain.getOutputNode(),{workerPath:"scripts/library/RecorderWorker.js"}),this.connectToOutput(this.nodes.reference),this.connectToInput(this.nodes.merger),this.disable=function(){i.nodes.inputBuffer.disconnectAll()},this.enable=function(){i.nodes.inputBuffer.connect(i.nodes.merger)},global_relay.on("global-record",this.record)},getReferenceNode:function(){return this.nodes.reference},record:function(){this._isRecording?(this.recorder.stop(),this._isRecording=!1,this.trigger("pause-record")):(this._clearRecording&&(this.recorder.clear(),this._clearRecording=!1),this.trigger("start-record"),this.recorder.record(),this._isRecording=!0)},getRecorder:function(){return this.recorder},stopRecord:function(){this.recorder.stop(),this._isRecording=!1,this._clearRecording=!0,this.trigger("stop-record"),global_relay.trigger("stop-record",this.recorder)},setGain:function(){this.nodes.gain.setGain.apply(this.nodes.gain,arguments)},getGain:function(){return this.nodes.gain.getGain()}});return i});