define(["modules/BaseModule","components/WaveShaper","components/Gain","modules/Equalizer","components/Filter","components/Convolver","components/Router","modules/Distortion"],function(e,t,n,r,i,s,o,u){Math.tanh=function(e,t){return(Math.exp(e*t)-Math.exp(-e*t*1.2))/(Math.exp(e*t)+Math.exp(-e*t))};var a=function(e){var t=22050,n=new Float32Array(t),r=2*e/(1-e);for(var i=0;i<t;i+=1){var s=(i-0)*2/(t-0)+ -1;n[i]=(1+r)*s/(1+r*Math.abs(s))}return n},f=e.extend({init:function(e){this._super.apply(this,arguments);var o=new n(this.context),a=new n(this.context),f=new r(this.context,3),l=new r(this.context,3),c=new r(this.context,3),h=new u(this.context),p=new t(this.context),d=new t(this.context),v=new i(this.context),m=new i(this.context),g=new s(this.context);o.setLabel("AmpSim/Input Gain"),a.setLabel("AmpSim/Output Gain"),f.setLabel("AmpSim/EQ"),p.setLabel("AmpSim/WaveStage 1"),d.setLabel("AmpSim/WaveStage 2"),v.setLabel("AmpSim/FilterStage 1"),m.setLabel("AmpSim/FilterStage 2"),g.setLabel("AmpSim/Cab Sim"),o.connect(c).connect(h).connect(l).connect(f).connect(g).connect(a),this.connectToInput(o).connectToOutput(a),this.nodes.inputGain=o,this.nodes.outputGain=a,this.nodes.userEQ=f,this.nodes.postEQ=l,this.nodes.preEQ=c,this.nodes.distortion=h,this.nodes.waveStage1=p,this.nodes.waveStage2=d,this.nodes.filterStage1=v,this.nodes.filterStage2=m,this.nodes.cabSim=g,this.setDefaults()},setDefaults:function(){this.nodes.outputGain.setGain(1),this.nodes.inputGain.setGain(1),this.nodes.filterStage1.setType(this.nodes.filterStage1.Types.HIGHPASS).setFrequency(100),this.nodes.filterStage2.setType(this.nodes.filterStage1.Types.HIGHPASS).setFrequency(400),this.nodes.waveStage1.setCurve(a(.8)),this.nodes.waveStage2.setCurve(a(.8)),this.nodes.userEQ.setFilterFrequency(1,90).setFilterFrequency(2,725).setFilterFrequency(3,4800).setFilterGain(1,0).setFilterGain(2,0).setFilterGain(3,0),this.nodes.postEQ.setFilterType(3,r.Types.LOWPASS).setFilterType(1,r.Types.HIGHPASS).setFilterFrequency(1,1e4).setFilterFrequency(2,3e3),this.nodes.preEQ.setFilterFrequency(1,1500).setFilterGain(1,10).setFilterType(1,r.Types.HIGHPASS).setFilterType(3,r.Types.LOWPASS).setFilterFrequency(2,700)},loadCab:function(){this.nodes.cabSim.loadImpulse.apply(this.nodes.cabSim,arguments)},setGainStage:function(e,t){this.nodes["waveStage"+e].setCurve(a(t))},setDrive:function(e){this.nodes.distortion.setAmount(e)},setLow:function(e){this.nodes.userEQ.setFilterGain(1,e)},setHigh:function(e){this.nodes.userEQ.setFilterGain(3,e)},setMid:function(e){this.nodes.userEQ.setFilterGain(2,e)},setInputGain:function(e){this.nodes.inputGain.setGain(e)},setOutputGain:function(e){this.nodes.outputGain.setGain(e)}});return f});