define(["components/Filter","components/Gain","modules/BaseModule"],function(e,t,n){var r={RANGE_MAX:22e3,RANGE_MIN:40},i=n.extend({init:function(n){this._super.apply(this,arguments),this.setLabel("Equalizer");var i,s=7,o=[],u=r.RANGE_MAX/s+r.RANGE_MIN,a=u,f=new t(this.context),l=new t(this.context);f.setLabel("Equalizer/Input Gain"),l.setLabel("Equalizer/Output Gain"),this.bands=s,this.nodes.inputGain=f,this.nodes.outputGain=l;for(var c=1;c<=s;c++)i=new e(this.context),i.setType(i.Types.PEAKING),i.setLabel("Equalizer/Filter"+c),function(e,t){o.push(t),e["filter"+c]=t}(this.nodes,i),a+=u,a=a>r.RANGE_MAX?r.RANGE_MAX:a,this.addParameter("filter"+c,i.getParameters());for(c=1;c<=s;c++)f.connect(this.nodes["filter"+c]),this.nodes["filter"+c].connect(l);this.addParameter("inputGain",f.getParameters()),this.addParameter("outputGain",l.getParameters()),this.connectToInput(f),this.connectToOutput(l),this.filters=o,this.setDefault()},setDefault:function(){var e=[60,150,400,1e3,2400,6e3,15e3];for(var t=0,n=e.length;t<n;t++)this.setFilterFrequency(t+1,e[t]).setFilterGain(t+1,0)},setFilterFrequency:function(e,t){return this.nodes["filter"+e].setFrequency(t),this},setFilterGain:function(e,t){return this.nodes["filter"+e].setGain(t),this},setFilterQ:function(e,t){return this.nodes["filter"+e].setQ(t),this},setFilterType:function(e,t){return this.nodes["filter"+e].setType(t),this},setInputGain:function(e){return this.nodes.inputGain.setGain(e),this},setOutputGain:function(e){return this.nodes.outputGain.setGain(e),this}});return i.Types=i.prototype.Types=e.Types,console.log("DEBUG: Equalizer Module Loaded"),i});